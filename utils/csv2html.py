#!/usr/bin/env python3
import csv
import argparse
import sys
import webbrowser
import http.server
import socketserver
import threading
import time
from typing import List, Optional
from pathlib import Path
from tabulate import tabulate


def create_html_template(table_html: str) -> str:
    """
    Create a complete HTML document with enhanced styling and interactivity.

    Args:
        table_html (str): The HTML table content to embed.

    Returns:
        str: Complete HTML document with CSS styling.
    """
    return f"""<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>CSV to HTML Table</title>
    <style>
        html {{
            font-family: Arial, sans-serif;
            font-size: 12px;
            margin: 20px;
            background-color: #f8f9fa;
        }}

        .container {{
            max-width: 1200px;
            margin: 0 auto;
            background-color: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }}

        table {{
            border-collapse: collapse;
            width: 100%;
            margin: 20px 0;
            background-color: white;
        }}

        th, td {{
            border: 1px solid #ddd;
            padding: 12px 8px;
            text-align: left;
        }}

        th {{
            background-color: #4a90e2;
            color: white;
            font-weight: bold;
            position: sticky;
            top: 0;
            z-index: 10;
        }}

        tr:nth-child(even) {{
            background-color: #f8f9fa;
        }}

        tr:hover {{
            background-color: #e3f2fd;
        }}

        .table-container {{
            max-height: 70vh;
            overflow: auto;
            border: 1px solid #ddd;
            border-radius: 4px;
        }}

        .info-bar {{
            background-color: #e9ecef;
            padding: 10px;
            border-radius: 4px;
            margin-bottom: 10px;
            font-size: 14px;
        }}

        footer {{
            font-size: 11px;
            margin-top: 20px;
            color: #666;
            text-align: center;
        }}
    </style>
</head>
<body>
    <div class="container">
        <h1>CSV Data Table</h1>
        <div class="info-bar">
            Generated from CSV data â€¢ Interactive table with sorting and filtering
        </div>
        <div class="table-container">
            {table_html}
        </div>
    </div>

    <footer>
        <p>Generated by csv2html.py</p>
    </footer>
</body>
</html>"""


def start_http_server(file_path: str, port: int = 8090) -> None:
    """
    Start a simple HTTP server to serve the HTML file.

    Args:
        file_path (str): Path to the HTML file to serve.
        port (int): Port number for the server.
    """
    class CustomHTTPRequestHandler(http.server.SimpleHTTPRequestHandler):
        def do_GET(self):
            if self.path == "/" or self.path == "":
                self.path = f"/{Path(file_path).name}"
            return super().do_GET()

    try:
        with socketserver.TCPServer(("", port), CustomHTTPRequestHandler) as httpd:
            print(f"Server running at http://localhost:{port}/")
            httpd.serve_forever()
    except OSError as e:
        print(f"Error starting server: {e}")


def csv_to_html(input_data: str, delimiter: str, suppress_data: bool,
                output_file: Optional[str] = None, show_in_browser: bool = False,
                port: int = 8090) -> int:
    """
    Convert CSV data to an HTML table and write it to stdout or file.

    Args:
        input_data (str): Raw CSV text to be converted to HTML.
        delimiter (str): The delimiter used in the CSV data.
        suppress_data (bool): If True, suppress printing data rows (headers only).
        output_file (Optional[str]): If provided, write output to this file.
        show_in_browser (bool): If True, open the output in a web browser.
        port (int): Port number for the HTTP server when showing in browser.

    Returns:
        int: Exit code (0 for success, 1 for failure).
    """
    try:
        rows: List[List[str]] = list(csv.reader(input_data.splitlines(), delimiter=delimiter))
    except csv.Error as e:
        sys.stderr.write(f"Error: Failed to parse CSV: {e}\n")
        return 1

    if not rows:
        sys.stderr.write("Error: CSV data is empty.\n")
        return 1

    # Extract headers from the first row
    headers: List[str] = rows[0]
    data_rows: List[List[str]] = rows[1:]

    # Generate HTML table using tabulate
    table_data: List[List[str]] = [] if suppress_data else data_rows
    html_table: str = tabulate(table_data, headers=headers, tablefmt="html")

    # Create complete HTML document with enhanced styling
    complete_html: str = create_html_template(html_table)

    # Write output to file or stdout
    if output_file:
        return _write_to_file(complete_html, output_file, show_in_browser, port)
    else:
        sys.stdout.write(complete_html)
        if not complete_html.endswith("\n"):
            sys.stdout.write("\n")

    return 0


def _write_to_file(html_content: str, output_file: str, show_in_browser: bool, port: int) -> int:
    """
    Write HTML content to file and optionally show in browser.

    Args:
        html_content (str): HTML content to write.
        output_file (str): Path to output file.
        show_in_browser (bool): Whether to open in browser.
        port (int): Port for HTTP server.

    Returns:
        int: Exit code (0 for success, 1 for failure).
    """
    try:
        with open(output_file, "w", encoding="utf-8") as f:
            f.write(html_content)
        print(f"Output file: {output_file}")

        if show_in_browser:
            _open_in_browser(output_file, port)

    except IOError as e:
        sys.stderr.write(f"Error writing to file: {e}\n")
        return 1

    return 0


def _open_in_browser(file_path: str, port: int) -> None:
    """
    Open the HTML file in a browser using a local HTTP server.

    Args:
        file_path (str): Path to the HTML file.
        port (int): Port for the HTTP server.
    """
    # Start server in a separate thread
    server_thread: threading.Thread = threading.Thread(
        target=start_http_server,
        args=(file_path, port),
        daemon=True
    )
    server_thread.start()

    # Give server time to start
    time.sleep(1)

    # Open browser
    webbrowser.open(f"http://localhost:{port}")

    try:
        # Keep the main thread alive
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        print("\nServer stopped.")


def main() -> int:
    """
    Entry point for the script.

    Parses command-line arguments and calls the csv_to_html function
    to convert the specified CSV text to HTML.
    """
    parser = argparse.ArgumentParser(description="Convert CSV to HTML using tabulate.")
    parser.add_argument(
        "input",
        nargs="?",
        type=str,
        help="Raw CSV text to be converted to HTML. If not provided, reads from stdin.",
    )
    parser.add_argument(
        "-d", "--delimiter",
        default=",",
        help="Specify the CSV delimiter (default: ',')."
    )
    parser.add_argument(
        "-sp", "--suppress",
        action="store_true",
        help="Suppress printing data rows (headers only)."
    )
    parser.add_argument(
        "-o", "--output",
        type=str,
        help="Output filename. If not specified, writes to stdout."
    )
    parser.add_argument(
        "-s", "--show",
        action="store_true",
        help="Open output file in browser (requires --output)."
    )
    parser.add_argument(
        "-p", "--port",
        type=int,
        default=8090,
        help="Server port number when using --show (default: 8090)."
    )

    args = parser.parse_args()

    # Handle input from stdin if no input argument provided
    if args.input is None:
        if sys.stdin.isatty():
            parser.error("No input provided. Either provide input as argument or pipe data to stdin.")
        input_data: str = sys.stdin.read()
    else:
        input_data: str = args.input

    # Validate show option
    if args.show and not args.output:
        parser.error("--show option requires --output to be specified.")

    return csv_to_html(
        input_data=input_data,
        delimiter=args.delimiter,
        suppress_data=args.suppress,
        output_file=args.output,
        show_in_browser=args.show,
        port=args.port
    )


if __name__ == "__main__":
    sys.exit(main())