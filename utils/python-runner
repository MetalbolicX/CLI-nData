#!/usr/bin/env bash
# Central Python script executor with virtual environment management
# Usage: python-runner <script-name> [script-arguments...]

set -euo pipefail

readonly SCRIPT_NAME="${1:-}"
readonly UTILS_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly VENV_DIR="$UTILS_DIR/venv"
readonly REQUIREMENTS_PATH="$UTILS_DIR/requirements.txt"

# Validate script name parameter
if [[ -z "$SCRIPT_NAME" ]]; then
    echo "Error: No script name provided"
    exit 1
fi

# Determine Python script path
readonly PYTHON_SCRIPT="$UTILS_DIR/${SCRIPT_NAME}.py"

# Validate Python script exists
if [[ ! -f "$PYTHON_SCRIPT" ]]; then
    echo "Error: Python script not found: $PYTHON_SCRIPT"
    exit 1
fi

# --- Automatic Virtual Environment Management ---

# Check if the virtual environment exists
if [ ! -d "$VENV_DIR" ]; then
    echo "Creating virtual environment at $VENV_DIR..."
    python3 -m venv "$VENV_DIR" || { echo "Error: Failed to create virtual environment."; exit 1; }
fi

# Activate the virtual environment
source "$VENV_DIR/bin/activate" || { echo "Error: Failed to activate virtual environment."; exit 1; }

# Install dependencies if requirements.txt is newer than a marker file
# This prevents reinstalling every time
INSTALL_MARKER="$VENV_DIR/.install_complete"
if [ "$REQUIREMENTS_PATH" -nt "$INSTALL_MARKER" ]; then
    echo "Installing/Updating dependencies in virtual environment..."
    pip install -r "$REQUIREMENTS_PATH" || { echo "Error: Failed to install dependencies."; deactivate; exit 1; }
    touch "$INSTALL_MARKER"
fi

# Execute Python script with remaining arguments
python3 "$PYTHON_SCRIPT" "${@:2}"

# --- Deactivate the virtual environment ---
deactivate