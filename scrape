#!/usr/bin/env -S deno run --allow-env

import { parseArgs } from "@std/cli";
import { readAll } from "@std/io";
import { parse } from "node-html-parser";

/**
 * Retrieves and parses the data input for the chart.
 * @param args {Record<string, any>} The command-line arguments.
 * @returns {Promise<aObject[]>} The parsed data input.
 */
const getDataInput = async (args) => {
  if (typeof args.html === "string" && args.html.trim().length > 0) {
    const root = parse(args.html);
    return root;
  }

  const buffer = await readAll(Deno.stdin);
  const input = new TextDecoder().decode(buffer).trim();

  if (!input) {
    console.error("Error: No data provided via --data or stdin.");
    Deno.exit(1);
  }

  const root = parse(input);
  return root;
};

/**
 * Displays the help message for the chart command.
 * @returns {void}
 */
const showHelp = () =>
  console.log(`
Usage: scrape [options]
Options:
    -h, --help          Show this help message
    -a, --attribute     Specify the attribute to scrape.
    -ht, --html         Specify the HTML element to scrape.
    -b, --body          Specify the body element to scrape.
    -e, --selector      Specify the selector to use for scraping.
    -f, --file          Specify the file to scrape.
    -x, --existance     Specify the existance check.
    -r, --raw_input     Specify the raw input to scrape.
  `);

const options = {
  boolean: ["help"],
  string: [
    "attribute",
    "html",
    "body",
    "selector",
    "file",
    "existance",
    "raw_input",
  ],
  alias: {
    h: "help",
    a: "attribute",
    ht: "html",
    b: "body",
    e: "selector",
    f: "file",
    x: "existance",
    r: "raw_input",
  },
};

/**
 * Main function to parse arguments and render the chart.
 * @returns {void}
 */
const main = async () => {
  const args = parseArgs(Deno.args, options);

  if (args.help) {
    showHelp();
    Deno.exit(0);
  }

  if (!args.selector?.length) {
    console.error("Error: --selector is a required option.");
    Deno.exit(1);
  }

  const root = await getDataInput(args);
  const elements = root.removeWhitespace().querySelectorAll(args.selector);
  console.log(elements.toString());

  if (args.attribute) {
    const results = elements
      .map((el) => ({
        [args.attribute]: el.getAttribute(args.attribute),
        textContent: el.textContent.trim(),
      }))
      .filter(Boolean);
    // console.log(results.join("\n"));
    console.table(results);
  }
};

if (import.meta.main) {
  main();
}
