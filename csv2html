#!/usr/bin/env python3
import csv
import argparse
import html
import sys
from typing import List

def csv_2_html(input_data: str, delimiter: str, suppress: bool) -> int:
    """
    Convert CSV data to an HTML table and write it to stdout.

    Args:
        input_data (str): Raw CSV text to be converted to HTML.
        delimiter (str): The delimiter used in the CSV data (e.g., ',' or ';').
        suppress (bool): If True, suppress printing rows to the console.

    Returns:
        int: Exit code (0 for success, 1 for failure).
    """
    try:
        rows: List[List[str]] = list(csv.reader(input_data.splitlines(), delimiter=delimiter))
    except csv.Error as e:
        sys.stderr.write(f"Error: Failed to parse CSV: {e}\n")
        return 1

    if not rows:
        sys.stderr.write("Error: CSV data is empty.\n")
        return 1

    # Extract headers from the first row
    headers: List[str] = rows[0]
    data_rows: List[List[str]] = rows[1:]

    # Start HTML generation
    output: List[str] = [
        "<!DOCTYPE html>",
        "<html>",
        "<head>",
        "<title>CSV to HTML</title>",
        "</head>",
        "<body>",
        "<table>",
        "<thead>",
        "<tr>",
        *[f"<th>{html.escape(header)}</th>" for header in headers],
        "</tr>",
        "</thead>",
        "<tbody>",
    ]

    # Process rows one by one
    if not suppress:
        output.extend(
            [
                "<tr>" + "".join(
                    f"<td>{html.escape(value)}</td>" for value in row
                ) + "</tr>"
                for row in data_rows
            ]
        )

    output.extend(["</tbody>", "</table>", "</body>", "</html>"])

    # Write output to stdout
    sys.stdout.write("\n".join(output) + "\n")
    return 0

def main() -> int:
    """
    Entry point for the script.

    Parses command-line arguments and calls the csv_to_html function
    to convert the specified CSV text to HTML.
    """
    parser = argparse.ArgumentParser(description="Convert CSV to HTML.")
    parser.add_argument(
        "input",
        nargs="?",
        type=str,
        default=sys.stdin.read(),
        help="Raw CSV text to be converted to HTML.",
    )
    parser.add_argument(
        "-d", "--delimiter", default=",", help="Specify the CSV delimiter (default: ',')."
    )
    parser.add_argument(
        "-s", "--suppress", action="store_true", help="Suppress printing each row to the screen."
    )
    args = parser.parse_args()

    input_data: str = args.input
    delimiter: str = args.delimiter
    suppress: bool = args.suppress

    return csv_2_html(input_data, delimiter, suppress)


if __name__ == "__main__":
    sys.exit(main())