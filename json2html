#!/usr/bin/env python3
import json
import argparse
import os
import html
import sys
from typing import List, Dict, Union, Any


def json_2_html(input_data: str, suppress: bool, is_file: bool) -> int:
    """
    Convert JSON data to an HTML table and write it to stdout.

    Args:
        input_data (str): Path to the input JSON file or raw JSON text.
        suppress (bool): If True, suppress printing rows to the console.
        is_file (bool): If True, treat input_data as a file path; otherwise, treat it as raw JSON text.

    Returns:
        int: Exit code (0 for success, 1 for failure).
    """
    try:
        data: Union[List[Dict[str, Any]], None]
        if is_file:
            if not os.path.isfile(input_data):
                sys.stderr.write(f"Error: File '{input_data}' does not exist.\n")
                return 1

            with open(input_data, "r", encoding="utf-8") as jsonfile:
                data = json.load(jsonfile)
        else:
            data = json.loads(input_data)
    except json.JSONDecodeError as e:
        sys.stderr.write(f"Error: Failed to parse JSON: {e}\n")
        return 1

    # Validate JSON structure
    if not isinstance(data, list):
        sys.stderr.write("Error: JSON data must contain an array of objects.\n")
        return 1

    if len(data) == 0:
        sys.stderr.write("Error: JSON data is empty.\n")
        return 1

    # Extract headers from the keys of the first object
    headers: List[str] = list(data[0].keys())

    # Start HTML generation
    output: List[str] = [
        "<!DOCTYPE html>",
        "<html>",
        "<head>",
        "<title>JSON to HTML</title>",
        "</head>",
        "<body>",
        "<table>",
        "<thead>",
        "<tr>",
        *[f"<th>{html.escape(header)}</th>" for header in headers],
        "</tr>",
        "</thead>",
        "<tbody>",
    ]

    # Process rows one by one
    if not suppress:
        output.extend(
            [
                "<tr>" + "".join(
                    f"<td>{html.escape(str(row.get(header, '')))}</td>" for header in headers
                ) + "</tr>"
                for row in data
            ]
        )

    output.extend(["</tbody>", "</table>", "</body>", "</html>"])

    # Write output to stdout
    sys.stdout.write("\n".join(output) + "\n")
    return 0


def main() -> int:
    """
    Entry point for the script.

    Parses command-line arguments and calls the json_to_html function
    to convert the specified JSON text to HTML.
    """
    parser = argparse.ArgumentParser(description="Convert JSON to HTML.")
    parser.add_argument(
        "input",
        nargs="?",
        type=str,
        default=sys.stdin.read(),
        help="Raw JSON text to be converted to HTML.",
    )
    parser.add_argument(
        "-s", "--suppress", action="store_true", help="Suppress printing each row to the screen."
    )
    args = parser.parse_args()

    input_data: str = args.input
    suppress: bool = args.suppress

    return json_2_html(input_data, suppress, is_file=False)


if __name__ == "__main__":
    sys.exit(main())