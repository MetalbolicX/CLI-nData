#!/usr/bin/env bash

# Fail fast and handle exit codes properly
set -eo pipefail

: 'dseq: Generate a sequence of dates relative to a start day.

Usage:
dseq [OPTIONS] LAST
dseq [OPTIONS] FIRST LAST
dseq [OPTIONS] FIRST INCREMENT LAST

Arguments (positional, after options):
LAST        : Generates dates from FIRST (default 1 for tomorrow) up to LAST.
                If only LAST is given, it implies FIRST=1 and INCREMENT=1.
FIRST       : The starting offset in days from the base date.
INCREMENT   : The step size in days for the sequence.

Options:
-f, --format <format_string>  Specify the output date format (e.g., "%Y-%m-%d", "%A, %B %d, %Y").
                                Uses 'date' command format codes. Default: +%F (YYYY-MM-DD).
-s, --start-date <date_string>  Specify the base date to start from (e.g., "2023-01-01", "tomorrow", "yesterday").
                                Default: today. This affects the '0 day' offset.
-h, --help                    Display this help message and exit.

Examples:
  dseq 1                       # Tomorrow (default: start=today, first=1, inc=1, last=1)
  dseq 0 0                     # Today (start=today, first=0, last=0)
  dseq 7                       # Next 7 days (start=today, first=1, inc=1, last=7)
  dseq -2 0                    # Day before yesterday till today (start=today, first=-2, inc=1, last=0)
  dseq 1 7 365                 # Tomorrow and then every week for a year (start=today, first=1, inc=7, last=365)
  dseq -f "%Y/%m/%d %a" 0 2    # Today, tomorrow, day after tomorrow in YYYY/MM/DD Day format
  dseq -s "2024-12-25" 0 2     # Dec 25, 26, 27 2024
  dseq -s "last friday" -1 0   # Last Friday and Saturday

Author: Jeroen Janssens (modified by José Martínez Santana)'

# --- Global Constants ---
readonly PROGNAME="$(basename "$0")"
readonly DEFAULT_FORMAT="+%F"  # YYYY-MM-DD
readonly EXIT_SUCCESS=0
readonly EXIT_INVALID_ARGS=1
readonly EXIT_INVALID_OPTIONS=2
readonly EXIT_VALIDATION_ERROR=3
readonly EXIT_EXECUTION_ERROR=4

# --- Global Variables ---
OUTPUT_FORMAT="$DEFAULT_FORMAT"
START_DATE_MODIFIER=""

# --- Functions ---

# Display usage information
usage() {
    # Extract the documentation comment block from the script
    sed -n "/^: '/,/^'/p" "$0" | sed -e "s/^: '//" -e "s/'$//" | head -n -1
    exit "$EXIT_SUCCESS"
}

# Display error message and exit
error_exit() {
    local message="$1"
    local exit_code="${2:-$EXIT_EXECUTION_ERROR}"

    echo "Error: $message" >&2
    exit "$exit_code"
}

# Validate that a string is a valid integer
is_valid_integer() {
    local value="$1"
    [[ "$value" =~ ^-?[0-9]+$ ]]
}

# Validate sequence parameters make logical sense
validate_sequence() {
    local first="$1"
    local increment="$2"
    local last="$3"

    # Check if INCREMENT is zero
    if (( increment == 0 )); then
        error_exit "INCREMENT cannot be zero." "$EXIT_VALIDATION_ERROR"
    fi

    # Check if sequence makes sense
    if (( increment > 0 )) && (( first > last )); then
        error_exit "With positive INCREMENT ($increment), FIRST ($first) cannot be greater than LAST ($last)." "$EXIT_VALIDATION_ERROR"
    fi

    if (( increment < 0 )) && (( first < last )); then
        error_exit "With negative INCREMENT ($increment), FIRST ($first) cannot be less than LAST ($last)." "$EXIT_VALIDATION_ERROR"
    fi
}

# Sanitize date format string to prevent command injection
sanitize_format() {
    local format="$1"

    # Remove any potentially dangerous characters or sequences
    # Allow only alphanumeric, spaces, hyphens, slashes, colons, percent signs, and common punctuation
    if [[ ! "$format" =~ ^[a-zA-Z0-9\ \-\/:%.,%_]+$ ]]; then
        error_exit "Invalid format string. Only alphanumeric characters, spaces, and common date format characters are allowed." "$EXIT_VALIDATION_ERROR"
    fi

    echo "$format"
}

# Sanitize start date string to prevent command injection
sanitize_start_date() {
    local date_str="$1"

    # Allow common date formats and relative date expressions
    # This is a basic sanitization - in production, you might want more sophisticated validation
    if [[ ! "$date_str" =~ ^[a-zA-Z0-9\ \-\/:.,_]+$ ]]; then
        error_exit "Invalid start date string. Only alphanumeric characters, spaces, and common date characters are allowed." "$EXIT_VALIDATION_ERROR"
    fi

    echo "$date_str"
}

# Parse command line arguments
parse_arguments() {
    local args=()

    while [[ "$#" -gt 0 ]]; do
        case "$1" in
            -f|--format)
                if [[ -n "$2" ]]; then
                    OUTPUT_FORMAT="$(sanitize_format "$2")"
                    shift # consume argument value
                else
                    error_exit "Option '$1' requires an argument." "$EXIT_INVALID_OPTIONS"
                fi
                ;;
            -s|--start-date)
                if [[ -n "$2" ]]; then
                    START_DATE_MODIFIER="$(sanitize_start_date "$2")"
                    shift # consume argument value
                else
                    error_exit "Option '$1' requires an argument." "$EXIT_INVALID_OPTIONS"
                fi
                ;;
            -h|--help)
                usage
                ;;
            -*)
                error_exit "Unknown option: $1" "$EXIT_INVALID_OPTIONS"
                ;;
            *)
                # Positional arguments
                args+=("$1")
                ;;
        esac
        shift # consume argument name or option
    done

    # Return the positional arguments
    printf '%s\n' "${args[@]}"
}

# Validate and set sequence parameters
set_sequence_parameters() {
    local -a args=("$@")
    local first increment last

    case "${#args[@]}" in
        1) # LAST
            first=1
            increment=1
            last="${args[0]}"
            ;;
        2) # FIRST LAST
            first="${args[0]}"
            increment=1
            last="${args[1]}"
            ;;
        3) # FIRST INCREMENT LAST
            first="${args[0]}"
            increment="${args[1]}"
            last="${args[2]}"
            ;;
        0)
            error_exit "No arguments provided. See usage with --help." "$EXIT_INVALID_ARGS"
            ;;
        *)
            error_exit "Invalid number of arguments. See usage with --help." "$EXIT_INVALID_ARGS"
            ;;
    esac

    # Validate arguments are integers
    for arg in "$first" "$increment" "$last"; do
        if ! is_valid_integer "$arg"; then
            error_exit "All positional arguments (FIRST, INCREMENT, LAST) must be integers. Got: $arg" "$EXIT_VALIDATION_ERROR"
        fi
    done

    # Validate sequence logic
    validate_sequence "$first" "$increment" "$last"

    # Set global variables (using uppercase as they're now global)
    FIRST="$first"
    INCREMENT="$increment"
    LAST="$last"
}

# Generate date sequence safely without eval
generate_date_sequence() {
    local first="$1"
    local increment="$2"
    local last="$3"
    local format="$4"
    local start_date="$5"

    # Create temporary file for date offsets
    local temp_file
    temp_file="$(mktemp)" || error_exit "Failed to create temporary file." "$EXIT_EXECUTION_ERROR"

    # Ensure cleanup on exit
    trap 'rm -f "$temp_file"' EXIT

    # Generate the sequence of day offsets
    if ! seq "$first" "$increment" "$last" | while IFS= read -r offset; do
        echo "$offset day"
    done > "$temp_file"; then
        error_exit "Failed to generate date sequence." "$EXIT_EXECUTION_ERROR"
    fi

    # Execute date command safely without eval
    local date_cmd=("date")

    if [[ -n "$start_date" ]]; then
        date_cmd+=(--date="$start_date")
    fi

    date_cmd+=(--file="$temp_file" "$format")

    # Execute the date command
    if ! "${date_cmd[@]}"; then
        error_exit "Failed to execute date command." "$EXIT_EXECUTION_ERROR"
    fi
}

# Main function
main() {
    local -a positional_args

    # Parse command line arguments
    readarray -t positional_args < <(parse_arguments "$@")

    # Set sequence parameters
    set_sequence_parameters "${positional_args[@]}"

    # Generate and output the date sequence
    generate_date_sequence "$FIRST" "$INCREMENT" "$LAST" "$OUTPUT_FORMAT" "$START_DATE_MODIFIER"
}

# Execute main function if script is run directly
[[ "${BASH_SOURCE[0]}" == "${0}" ]] && main "$@"